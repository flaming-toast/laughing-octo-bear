from pox.core import core
from pox.lib.addresses import * 
from pox.lib.packet import *
import fileinput
import re
# Get a logger
log = core.getLogger("fw")

class Firewall (object):
  """
  Firewall class.
  Extend this to implement some firewall functionality.
  Don't change the name or anything -- the eecore component
  expects it to be firewall.Firewall.
  """
  def __init__(self):
    """
    Constructor.
    Put your initialization code here.
    """
    self.banned_ports = {}
    self.banned_domains = {}
    for line in fileinput.input('/root/pox/ext/banned-ports.txt'):
      portNumber = int(line)
      self.banned_ports[portNumber] = True
    for line in fileinput.input('/root/pox/ext/banned-domains.txt'):
      domain = str(line).rstrip()
      self.banned_domains[domain] = True
    for item in self.banned_domains.keys():
      if re.match("www", item):
	continue
      else:
	self.banned_domains["www."+item] = True
 
    
    log.debug("Firewall initialized.")
    log.debug("banned ports:" + str(self.banned_ports))
    log.debug("banned domains: " + str(self.banned_domains))

  def _handle_ConnectionIn (self, event, flow, packet):
    """
    New connection event handler.
    You can alter what happens with the connection by altering the
    action property of the event.
    """
    log.debug("HANDLE_CONNECTIONIN")
    log.debug("Allowed connection [" + str(flow.src) + ":" + str(flow.srcport) + "," + str(flow.dst) + ":" + str(flow.dstport) + "]" )
    event.action.defer = True

  def _handle_DeferredConnectionIn (self, event, flow, packet):
    """
    Deferred connection event handler.
    If the initial connection handler defers its decision, this
    handler will be called when the first actual payload data
    comes across the connection.
    """
    tcpdata = str(packet.payload.payload.payload)
    log.debug("DEFERRED")
    log.debug("PAYLOAD: " + tcpdata) 
    payload = re.split("\n+", tcpdata)
    for item in payload:
	if re.match("Host", item):
    		hostname = item
		log.debug("HTTP HEADER, DEST -- " + hostname) 
    temp = re.split("\s+", hostname) 
    hostname = temp[1]
    log.debug("This is where you're going: " + hostname)
    for item in self.banned_domains:
	if re.match(hostname, item) or re.match(hostname.split('.')[-2], item.split('.')[-2]):
		log.debug("destination matches a host on the banned domain list")
		event.action.deny = True
		return
    event.action.forward = True

    
  def _handle_MonitorData (self, event, packet, reverse):
    """
    Monitoring event handler.
    Called when data passes over the connection if monitoring
    has been enabled by a prior event handler.
    """
    pass
